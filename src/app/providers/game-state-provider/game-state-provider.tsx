import { PropsWithChildren, useEffect, useMemo, useRef, useState } from 'react';

import { Note } from '../../utils/note';
import { Particle } from '../../utils/particle';
import { gameStateContext } from './context';
import { GameState, GameStateContext, Lane, Song, Sounds } from './types';

const lanes: Lane[] = [
  { x: 200, color: '#ff4444' },
  { x: 300, color: '#ffff44' },
  { x: 400, color: '#4444ff' },
  { x: 500, color: '#44ff44' },
];
const beatTimes = [
  1.771474, 2.214626, 2.6578, 3.236281, 3.698662, 4.161066, 4.910091, 5.37424,
  5.83839, 6.300748, 6.764331, 7.227937, 7.708503, 8.173061, 8.637619, 9.112698,
  9.576077, 10.039456, 10.527574, 10.992177, 11.45678, 11.977166, 12.443061,
  12.908957, 13.409342, 13.876984, 14.344603, 14.812222, 15.5661, 16.037732,
  16.749274, 17.215601, 17.681905, 18.130204, 18.590952, 19.051723, 19.560385,
  20.020181, 20.479955, 21.233832, 21.694921, 22.156009, 22.872585, 23.33449,
  24.218594, 24.683152, 25.147732, 25.490794, 25.954671, 26.418526, 27.149002,
  27.612834, 28.076644, 28.590045, 29.052472, 29.514921, 30.03161, 30.500385,
  30.969138, 31.67576, 32.14254, 32.609342, 33.129116, 33.597347, 34.065601,
  34.559025, 35.027324, 35.495601, 35.971633, 36.438889, 36.906122, 37.425624,
  37.895578, 38.365533, 38.861066, 39.330703, 39.80034, 40.327846, 40.800794,
  41.273741, 41.761746, 42.233878, 42.706009, 43.205261, 43.67746, 44.149683,
  44.656599, 45.129501, 45.602426, 46.090884, 46.563197, 47.035488, 47.5078,
  48.061293, 48.532404, 49.003515, 49.443016, 49.910884, 50.37873, 50.859184,
  51.324399, 51.789592, 52.292472, 52.758231, 53.223991, 53.71263, 54.178662,
  54.644694, 55.131746, 55.596803, 56.061859, 56.543651, 57.008277, 57.472902,
  57.937528, 58.484512, 58.948526, 59.41254, 59.873605, 60.338163, 60.802721,
  61.284263, 61.748095, 62.211927, 62.711179, 63.177574, 63.643968, 64.1561,
  64.622721, 65.089365, 65.587415, 66.054785, 66.522154, 67.015941, 67.482086,
  67.948231, 68.429433, 68.894376, 69.359297, 69.82424, 70.363356, 70.828299,
  71.293243, 71.728413, 72.191315, 72.654218, 73.248254, 73.710204, 74.172154,
  74.56644, 75.028662, 75.490907, 75.978912, 76.441882, 76.90483, 77.391179,
  77.854127, 78.317075, 79.20195, 79.665034, 80.128095, 80.680839, 81.143878,
  81.606916, 82.168345, 82.632109, 83.095873, 83.619297, 84.087324, 84.555351,
  85.078798, 85.550748, 86.022698, 86.77034, 87.242041, 87.966054, 88.433628,
  88.901179, 89.588753, 90.053333, 90.517914, 90.883946, 91.354127, 91.824308,
  92.308413, 92.779955, 93.251497, 93.770204, 94.243787, 94.71737, 95.234467,
  95.709592, 96.184717, 96.703832, 97.18059, 97.657347, 98.142313, 98.619841,
  99.09737, 99.61034, 100.085964, 100.561587, 101.037211, 101.600385, 102.07424,
  102.989569, 103.463061, 103.936531, 104.430703, 104.90415, 105.377596,
  105.880113, 106.354014, 106.827914, 107.325737, 107.799048, 108.272358,
  109.007732, 109.48161, 109.955465, 110.252381, 110.726349, 111.20034,
  111.687279, 112.160476, 112.633696, 113.126916, 113.599184, 114.071429,
  114.573515, 115.046236, 115.518957, 116.015397, 116.488481, 116.961565,
  117.451565, 117.924195, 118.396825, 118.869456, 119.425601, 119.895601,
  120.816009, 121.283016, 121.75, 122.220658, 122.687506, 123.154331, 123.63356,
  124.100431, 124.567302, 125.103039, 125.573537, 126.044014, 126.565261,
  127.036712, 127.508163, 127.986485, 128.45712, 128.927755, 129.423288,
  129.890884, 130.358458, 130.839751, 131.305692, 131.771633, 132.237551,
  132.781315, 133.247596, 133.7139, 134.155737, 134.621338, 135.086916,
  135.577891, 136.042472, 136.507075, 137.23458, 137.698345, 138.162109,
  138.86898, 139.331429, 139.881746, 140.345624, 140.809524, 141.293968,
  141.757937, 142.221927, 143.108776, 143.577392, 144.045986, 144.727664,
  145.199615, 145.690884, 146.164059, 146.637256, 147.130544, 147.603129,
  148.075714, 148.548322, 149.098571, 149.567506, 150.036417, 150.574127,
  151.037755, 151.501383, 151.950045, 152.411859, 152.873673, 153.376871,
  153.843923, 154.310975, 154.987664, 155.458005, 155.928345, 156.335646,
  156.80873, 157.281791, 157.780023, 158.254671, 158.72932, 159.244399,
  159.72102, 160.197642, 160.702041, 161.178503, 161.654966, 162.158685,
  162.634921, 163.111156, 163.609002, 164.084739, 164.560476, 165.06839,
  165.543673, 166.018957, 166.515533, 166.990136, 167.464717, 167.937483,
  168.410839, 168.884218, 169.357596, 169.86059, 170.331633, 170.802653,
  171.320567, 171.789093, 172.257642, 172.788662, 173.26034, 173.731995,
  174.244104, 174.718163, 175.192245, 175.696168, 176.171202, 176.646236,
  177.142948, 177.616803, 178.090635, 178.563084, 179.035941, 179.508798,
  180.251497, 180.722086, 181.192698, 181.487642, 181.958073, 182.428526,
  183.171973, 183.64356, 184.115125, 184.700816, 185.166961, 185.633107,
  186.193719, 186.657483, 187.121247, 187.677778, 188.140522, 188.603265,
  189.161995, 189.623832, 190.085646, 190.590998, 191.053107, 191.515238,
  192.052222, 192.523039, 192.993832, 193.464195, 193.931859, 194.399546,
  194.946757, 195.412472, 195.878186, 196.593424, 197.055782, 197.518118,
  197.87424, 198.328209, 198.782154, 199.322902, 199.795805, 200.26873,
  200.763515, 201.236236, 201.708957, 202.253878, 202.725828, 203.197755,
  204.024603, 204.487324, 204.950068, 205.496054, 205.951497, 206.406916,
  206.987415, 207.445488, 207.90356, 208.488073, 208.959229, 209.430363,
  209.988322, 210.460771, 210.933197, 211.483651, 211.954898, 212.426168,
  212.982109, 213.453764, 213.925397, 214.372562, 214.845941, 215.31932,
  215.760544, 216.233379, 216.70619, 217.278549, 217.750023, 218.221519,
  218.886984, 219.356327, 219.825669, 220.182472, 220.654649, 221.126848,
  221.596961, 222.06873, 222.540499, 223.051791, 223.523288, 223.994762,
  224.734059, 225.204717, 225.675374, 226.414444, 226.885828, 227.357188,
  227.915488, 228.388594, 229.317188, 229.790726, 230.264263, 230.775465,
  231.248707, 231.72195, 232.465374, 232.9378, 233.663492, 234.135306,
  234.60712, 235.112426, 235.584082, 236.055737, 236.573492, 237.045306,
  237.51712, 238.005238, 238.477256, 238.949274, 239.694785, 240.165465,
  240.636168, 241.365782, 241.835896, 242.36288, 242.833605, 243.304331,
  243.7678, 244.236599, 244.705397, 245.174195, 245.724921, 246.192086,
  246.659274, 247.322222, 247.786961, 248.600998, 249.066553, 249.532132,
  250.095737, 250.559864, 251.023968, 251.580499, 252.043923, 252.50737,
  253.058299, 253.517596, 253.976893, 254.541927, 255.000023, 255.458095,
  255.831701, 256.295261, 256.758821, 257.527029, 257.991837, 258.456621,
  259.1739, 259.637438, 260.502744, 260.965193, 261.427664, 262.071723,
  262.533084, 262.994422, 263.539546, 264.003401, 264.467234, 265.017098,
  265.482449, 265.947823, 266.490907, 266.955964, 267.42102, 267.839841,
  268.306145, 268.772426, 269.272698, 269.738912, 270.205125, 270.683469,
  271.148866, 271.614263, 272.099683, 272.563968, 273.028231, 273.877778,
  274.340567, 274.803379, 275.482132, 275.943878, 276.847438, 277.307778,
  277.768095, 278.329773, 278.793175, 279.256553, 279.7561, 280.220204,
  280.684308, 281.182744, 281.645918, 282.109093, 282.585873, 283.048617,
  283.511338, 283.957234, 284.414875, 284.872517, 285.338095, 285.795714,
  286.253333, 286.71093, 287.200136, 287.658005, 288.115873, 288.588299,
  289.046576, 289.504853, 289.996349, 290.454308, 290.91229, 291.654603,
  292.115125, 292.575646, 293.026009, 293.4822, 293.93839, 294.542245,
  294.998186, 295.454104, 295.819456, 296.275079, 296.730703, 297.186327,
  297.481791, 297.93966, 298.397506, 298.872132, 299.331361, 299.79059,
  300.270612, 300.728912, 301.187211, 301.64551, 302.176735, 302.634354,
  303.091973, 303.630476, 304.089365, 304.548231, 305.081315, 305.539977,
  305.998662, 306.557392, 307.016848, 307.476327, 308.03712, 308.493401,
  308.949683, 309.521224, 309.976531, 310.431837, 311.005986, 311.460635,
  311.915283, 312.494218, 312.949955, 313.405669, 313.983379, 314.440635,
  314.897914, 315.471565, 315.929887, 316.388209, 316.95712, 317.415193,
  317.873243, 318.432789, 318.885646, 319.338503, 319.929909, 320.382494,
  320.835079, 321.412018, 321.862585, 322.313175, 322.900317, 323.351995,
  323.803696, 324.387234, 324.839365, 325.291497, 325.873696, 326.326009,
  326.778322, 327.359048, 327.810998, 328.262948, 328.71229, 329.164694,
  329.617098, 330.332449, 330.785011, 331.237596, 331.816576, 332.268186,
  332.719796, 333.302063, 333.753379, 334.204694, 334.785624, 335.235646,
  335.685692, 336.274104, 336.725351, 337.176599, 337.760839, 338.212426,
  338.663991, 339.244331, 339.694626, 340.144921, 340.728299, 341.177528,
  341.626757, 342.211905, 342.659909, 343.107891, 343.696621, 344.143923,
  344.591224, 345.182698, 345.63, 346.077302, 346.667823, 347.114649,
  347.561474, 348.156122, 348.604059, 349.052018, 349.639025, 350.085397,
  350.531769, 351.123764, 351.569456, 352.015147, 352.611633, 353.058209,
  353.504807, 354.116599,
];
const beatsToRandomLanes = (beats: number[]): number[] => {
  const numLanes = 4;
  const result: number[] = [];
  let lastLane: number | null = null;

  beats.forEach(() => {
    let newLane: number;
    do {
      newLane = Math.floor(Math.random() * numLanes);
    } while (newLane === lastLane); // Avoid repeats
    result.push(newLane);
    lastLane = newLane;
  });

  return result;
};
const songs: Record<string, Song> = {
  song1: {
    audio: new Audio('song1.mp3'),
    bpm: 125,
    beatMap: beatsToRandomLanes(beatTimes),
  },
};
const sounds: Sounds = {
  hit: new Audio('hit.wav'),
  miss: new Audio('miss.wav'),
};
const noteSpeed = 0.1;
const targetY = 500;

export function GameStateProvider({ children }: Readonly<PropsWithChildren>) {
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const [score, setScore] = useState<number>(0);
  const [combo, setCombo] = useState<number>(0);
  const [songKey, setSongKey] = useState<string>('song1');
  const [gameState, setGameState] = useState<GameState>({
    notes: [],
    particles: [],
    currentSong: null,
    gameRunning: false,
    lastBeat: -1,
    startTime: 0,
  });

  const spawnNote = (): Note | null => {
    if (!gameState.currentSong) return null;
    const beatInterval = 60000 / gameState.currentSong.bpm;
    const timeElapsed = performance.now() - gameState.startTime;
    const beatCount = Math.floor(timeElapsed / beatInterval);

    if (gameState.lastBeat !== beatCount) {
      const lane =
        gameState.currentSong.beatMap[
          beatCount % gameState.currentSong.beatMap.length
        ];
      return new Note(
        lanes[lane].x,
        lanes[lane].color,
        timeElapsed + 600 / noteSpeed,
      );
    }
    return null;
  };

  const checkHit = (laneX: number): void => {
    const newNotes = [...gameState.notes];
    for (let i = 0; i < newNotes.length; i++) {
      const note = newNotes[i];
      if (Math.abs(note.x - laneX) < 35 && Math.abs(note.y - targetY) < 60) {
        newNotes.splice(i, 1);
        const newScore =
          score + 100 * (combo > 0 ? Math.min(combo * 0.1 + 1, 2) : 1);
        setScore(newScore);
        setCombo(combo + 1);
        setGameState((prev) => ({
          ...prev,
          notes: newNotes,
          particles: [
            ...prev.particles,
            ...Array(10)
              .fill(undefined)
              .map(() => new Particle(laneX, targetY, note.color)),
          ],
        }));
        sounds.hit.play();
        break;
      }
    }
  };

  const startGame = (): void => {
    if (gameState.currentSong) gameState.currentSong.audio.pause();

    const newSong = songs[songKey];
    newSong.audio.currentTime = 0;

    setScore(0);
    setCombo(0);
    setGameState({
      notes: [],
      particles: [],
      currentSong: newSong,
      gameRunning: true,
      lastBeat: -1,
      startTime: performance.now(),
    });
    newSong.audio.play();
  };

  useEffect(() => {
    const canvas = canvasRef.current;
    if (!canvas) return;
    const ctx = canvas.getContext('2d');
    if (!ctx) return;
    let animationFrameId: number;

    const render = () => {
      if (!gameState.gameRunning) return;

      ctx.clearRect(0, 0, canvas.width, canvas.height);

      // Draw lanes
      lanes.forEach((lane) => {
        const gradient = ctx.createLinearGradient(
          lane.x,
          0,
          lane.x,
          canvas.height,
        );
        gradient.addColorStop(0, lane.color + '33');
        gradient.addColorStop(1, lane.color + '00');
        ctx.fillStyle = gradient;
        ctx.fillRect(lane.x - 30, 0, 60, canvas.height);

        ctx.beginPath();
        ctx.arc(lane.x, targetY, 30, 0, Math.PI * 2);
        ctx.strokeStyle = lane.color;
        ctx.lineWidth = 4;
        ctx.stroke();
      });

      // Update and draw particles
      const newParticles = gameState.particles
        .filter((p) => p.life > 0)
        .map((p) => {
          p.x += p.vx;
          p.y += p.vy;
          p.life--;
          p.size *= 0.95;
          ctx.beginPath();
          ctx.arc(p.x, p.y, p.size, 0, Math.PI * 2);
          ctx.fillStyle = p.color;
          ctx.fill();
          return p;
        });

      // Update and draw notes
      const newNote = spawnNote();
      const updatedNotes = (
        newNote ? [...gameState.notes, newNote] : [...gameState.notes]
      )
        .map((note) => {
          note.y += noteSpeed;
          note.rotation += 0.05;

          ctx.save();
          ctx.translate(note.x, note.y);
          ctx.rotate(note.rotation);

          ctx.beginPath();
          ctx.arc(0, 0, note.radius + 5, 0, Math.PI * 2);
          ctx.fillStyle = note.color + '33';
          ctx.fill();

          ctx.beginPath();
          ctx.arc(0, 0, note.radius, 0, Math.PI * 2);
          ctx.fillStyle = note.color;
          ctx.fill();

          ctx.beginPath();
          ctx.arc(0, 0, note.radius * 0.6, 0, Math.PI * 2);
          ctx.fillStyle = 'white';
          ctx.fill();

          ctx.restore();

          return note;
        })
        .filter((note) => {
          if (note.y > canvas.height + note.radius) {
            setCombo(0);
            sounds.miss.play();
            return false;
          }
          return true;
        });

      setGameState((prev) => ({
        ...prev,
        notes: updatedNotes,
        particles: newParticles,
        lastBeat: newNote
          ? Math.floor(
              (performance.now() - prev.startTime) /
                (60000 / prev.currentSong!.bpm),
            )
          : prev.lastBeat,
      }));

      animationFrameId = requestAnimationFrame(render);
    };

    if (gameState.gameRunning) {
      render();
    }

    return () => cancelAnimationFrame(animationFrameId);
  }, [gameState, score, combo]);

  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      const keyMap: Record<string, number> = {
        KeyA: 0,
        KeyS: 1,
        KeyD: 2,
        KeyF: 3,
      };
      if (keyMap[e.code] !== undefined) {
        checkHit(lanes[keyMap[e.code]].x);
      }
    };
    window.addEventListener('keydown', handleKeyDown);
    return () => window.removeEventListener('keydown', handleKeyDown);
  }, [gameState.notes, score, combo]);

  const contextValue = useMemo<GameStateContext>(
    () => ({
      canvasRef,
      score,
      combo,
      songKey,
      setSongKey,
      gameState,
      startGame,
    }),
    [canvasRef, score, combo, songKey, setSongKey, gameState, startGame],
  );

  return (
    <gameStateContext.Provider value={contextValue}>
      {children}
    </gameStateContext.Provider>
  );
}
